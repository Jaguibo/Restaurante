export let productosMenu = [];

// Clave de localStorage para persistencia offline
const LOCAL_STORAGE_KEY = "productosMenuCache";

// Aseg√∫rate de declarar productosMenu si viene de otro m√≥dulo
import { productosMenu } from "./menu_datos.js";

export async function cargarMenu() {
  console.log("üçΩÔ∏è [Menu] Iniciando carga del men√∫ de productos...");

  const BASE_URL = window.location.hostname.includes("localhost")
    ? "http://localhost:5000"
    : "https://restaurante-mqgs.onrender.com";

  try {
    const res = await fetch(`${BASE_URL}/api/productos`, {
      method: "GET",
      credentials: "include"
    });

    if (!res.ok) {
      console.warn(`‚ö†Ô∏è [Menu] Error HTTP al cargar el men√∫. C√≥digo: ${res.status}`);
      return usarCacheOffline("No se pudo cargar el men√∫ desde el servidor.");
    }

    const productos = await res.json();

    if (!Array.isArray(productos)) {
      console.warn("‚ö†Ô∏è [Menu] Respuesta del servidor no es una lista v√°lida.");
      return usarCacheOffline("Datos recibidos inv√°lidos.");
    }

    productosMenu.length = 0; // Limpiar el array si ya exist√≠a
    productosMenu.push(...productos); // Copiar elementos
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(productos));
    console.log(`‚úÖ [Menu] ${productos.length} producto(s) cargado(s) desde el servidor.`);
    return { productos };
  } catch (error) {
    console.error("‚ùå [Menu] Error de conexi√≥n al cargar el men√∫:", error);
    return usarCacheOffline("Error de conexi√≥n. Mostrando datos en cach√©.");
  }
}

function usarCacheOffline(mensaje) {
  const cache = localStorage.getItem(LOCAL_STORAGE_KEY);
  if (cache) {
    const productos = JSON.parse(cache);
    productosMenu.length = 0;
    productosMenu.push(...productos);
    console.warn(`üì¶ [Offline] Usando cach√© local (${productos.length} productos).`);
    alert(`‚ö†Ô∏è ${mensaje}`);
    return { productos };
  } else {
    console.error("üì≠ [Offline] No hay cach√© local disponible.");
    alert("‚ùå No hay conexi√≥n y tampoco datos en cach√©.");
    return { productos: [] };
  }
}


// Funci√≥n auxiliar para usar los datos almacenados localmente si hay un error
function usarCacheOffline(mensaje) {
  const cache = localStorage.getItem(LOCAL_STORAGE_KEY);
  
  if (cache) {
    try {
      const productosCache = JSON.parse(cache);
      if (Array.isArray(productosCache)) {
        productosMenu = productosCache;
        console.warn(`üì¶ [Menu] Usando men√∫ en cach√©. ${productosCache.length} producto(s) recuperado(s).`);
        return {
          productos: productosCache,
          offline: true,
          warning: mensaje
        };
      } else {
        console.error("‚ùå [Menu] Los datos en cach√© no son v√°lidos.");
      }
    } catch (parseError) {
      console.error("‚ùå [Menu] Error al analizar el cach√©:", parseError);
    }
  }

  console.error("üö´ [Menu] No se pudo recuperar el men√∫ ni desde el servidor ni desde el cach√©.");
  return {
    error: "No se pudo cargar el men√∫. Intenta m√°s tarde.",
    offline: true
  };
}
